* stuff to do

** TODO add quit-on-esc and print-state key pressed handlers to input ns

** TODO record region of sketch into spritesheet?
*** it would be super awesome to be able to program some kind of animation (like particle effects) and then be able to record the sketch at a specific framerate and output to images to be stitched together

** TODO Simple geometric sprites?

** TODO A base platform sprite and collider?

** TODO supply ubuntu mono font as it's the one we're using by default

** TODO resolution-based scaling
*** This is a lot of work, we want a neat way of specifying dimensions and coordinates as well as a way of rescaling images being used so we don't have to perform this in real time.

** TODO rulers for borders, dev debug overlay?
*** TODO would be nice to be able to draw sprites hitboxes

** TODO an easier way of making things clickable, the way buttons works repeats collision detection too much

** TODO BUG - clicking a button which starts a scene transition stops the mouse-released handler from being invoked, when you next visit the original scene the button is still pressed.
*** TODO the transition update should process at least mouse and keyboard release events

** TODO be able to specify a function for determining the order sprites should be drawn
*** maybe add in some defaults like top-to-bottom?

** DONE try calculating faster line intersections using num/denom comparison instead of division, test performance

** DONE Add delays
*** DONE clean up delays solution and reimplement
*** DONE create example game

** DONE Scrap current profiling, instead use benchmarking for individual example games

** DONE add start/stoppable tweens to sprites
*** DONE yoyo?
*** DONE supply useful default easing functions
*** DONE specify number of repetitions, option for continuous repeat
*** DONE specify how long tween takes
**** specifying step-count will do
*** DONE on-complete-fn?
*** DONE on-yoyo-fn?
*** DONE example game

** DONE efficient and generic collision detection
*** DONE allow colliders to update the state as well as each colliding sprite?
**** as with tweens it's best to just make the sprites look weird and search for these in the state update
*** performance is one thing, but we also want to try and solve being able to handle updating both entities involved in the collision
*** DONE create the structure required to check arbitrary sprite groups for collisions defined by collider maps on the scene.
*** DONE colliders should default to using w*h rect collision detection, but allow alternative collision detection function f(a,b) to be applied.
**** DONE provide helpful defaults like equal-positions, point-in-square, point-in-poly, point-in-rotating-poly
*** DONE implement a game that uses collision
*** DONE analyse performance characteristics of colliders

** DONE Set up CI

** DONE revisit sound, room for improvement
*** use the solution from dynamically-typed

** DONE Deploy to Clojars

** DONE test using quip as a library from a seperate project
*** used it for dynamically-typed for the Autumn Lisp Game Jam 2020

** DONE rotatable sprites
